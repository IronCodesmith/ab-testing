@using System.Web.Optimization
@model EPiServer.Marketing.Testing.TestPages.Controllers.ApiTestingController.IntegrationTestModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Integration</title>
    @Styles.Render("~/bundles/css")
    @Scripts.Render("~/bundles/js")


</head>
    <body class="Sleek" onload="CheckCount()">
        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js"></script>

        <script type="text/javascript">
            function CheckCount() {
                var count = '@(Model.QueueCount)';
                if ('@(Model.QueueCount)' > 0)
                {
                    setTimeout(function () { window.location.reload(); }, 500); 
                }
            }
        </script>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>Integration Testing</legend>
                <br />
                <table>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Base TestName ")</td><td>@Html.EditorFor(model => model.BaseTestName)</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Number of Tests")</td><td>@Html.EditorFor(model => model.NumberOfTests)</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("View Messages ")</td><td> @Html.EditorFor(model => model.Views)</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Conversions Messages")</td><td> @Html.EditorFor(model => model.Conversions)</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Elapsed Time to Create Tests")</td><td>&nbsp;</td><td> @Model.ElapsedTimeToCreateTests</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Elapsed Time to Emit Messages")</td><td>&nbsp;</td><td> @Model.ElapsedTimeToEmitMessages</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Elapsed Time to Process Messages")</td><td>&nbsp;</td><td> @Model.ElapsedTimeToProcessAllMessages</td>
                        </div>
                    </tr>
                    <tr>
                        <div class="editor-label">
                            <td>@Html.Label("Messages in Queue")</td><td>&nbsp;</td><td>@Model.QueueCount</td>
                        </div>
                    </tr>
                    <tr>
                        <td>@Html.Label("Total Messages")</td>
                        <td>&nbsp;</td>
                        <td>
                            @{
                                var x = Model.NumberOfTests * (Model.Views * 2 + Model.Conversions * 2);
                                @x
                            }
                        </td>
                    <tr>
                        <td>@Html.Label("Messages per Second")</td>
                        <td>&nbsp;</td>
                        <td>
                            @{
                                if (Model.ElapsedTimeToProcessAllMessages.Seconds != 0)
                                {
                                    var y = (double)(x - Model.QueueCount) / (double)Model.ElapsedTimeToProcessAllMessages.TotalSeconds;
                                    @y
                                }
                            }
                        </td>
                    </tr>
                </table>
                <br />
                <input type="submit" value="Create" />
            </fieldset>
        }
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
</body>
</html>